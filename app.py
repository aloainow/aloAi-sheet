import os
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
from langchain.chat_models import ChatOpenAI
from langchain.callbacks import StreamlitCallbackHandler
from langchain.agents.agent import AgentExecutor

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="BasketIA üèÄ", page_icon="üèÄ", layout="wide")
st.title("BasketIA üèÄ")

# Barra lateral com informa√ß√µes das colunas
with st.sidebar:
    st.header("Configura√ß√µes e Ajuda üìä")
    temperature = st.slider("Temperatura", 0.0, 1.0, 0.5, 0.1)
    
    # Expandable para mostrar estat√≠sticas dispon√≠veis
    with st.expander("üìà Estat√≠sticas Dispon√≠veis"):
        st.markdown("""
        ### Informa√ß√µes do Jogador
        - **Player Name**: Nome do jogador
        - **Team Name**: Nome do time
        - **League**: Liga
        - **Nationality**: Nacionalidade
        - **Country**: Pa√≠s
        - **Age**: Idade
        - **Height**: Altura
        - **Pos**: Posi√ß√£o
        - **GP**: Jogos disputados
        - **TYPE**: Tipo de jogador
        
        ### Estat√≠sticas Principais
        - **EFF**: Efici√™ncia
        - **MPG**: Minutos por jogo
        - **PPG**: Pontos por jogo
        - **RPG**: Rebotes por jogo
        - **APG**: Assist√™ncias por jogo
        - **BPG**: Bloqueios por jogo
        - **SPG**: Roubos de bola por jogo
        
        ### Estat√≠sticas Detalhadas
        - **ORB**: Rebotes ofensivos
        - **DRB**: Rebotes defensivos
        - **PF**: Faltas pessoais
        - **TO**: Turnovers (perdas de bola)
        
        ### Arremessos
        - **FTA**: Tentativas de lance livre
        - **FTM**: Lances livres convertidos
        - **FT%**: Percentual de acerto em lances livres
        - **2PA**: Tentativas de 2 pontos
        - **2PM**: Arremessos de 2 pontos convertidos
        - **2P%**: Percentual de acerto em arremessos de 2 pontos
        - **3PA**: Tentativas de 3 pontos
        - **3PM**: Arremessos de 3 pontos convertidos
        - **3P%**: Percentual de acerto em arremessos de 3 pontos
        """)
    
    # Expandable para exemplos de perguntas
    with st.expander("‚ùì Exemplos de Perguntas"):
        st.markdown("""
        1. "Mostre os top 10 jogadores de 24 anos"
        2. "Quais s√£o os jogadores com maior PPG?"
        3. "Liste os jogadores com melhor aproveitamento de 3 pontos"
        4. "Quem s√£o os l√≠deres em assist√™ncias?"
        5. "Mostre os jogadores mais eficientes (EFF) da liga"
        """)

def load_data():
    """Carrega dados do CSV"""
    try:
        files = [f for f in os.listdir('files') if f.endswith('.csv')]
        if not files:
            st.error("Nenhum arquivo CSV encontrado na pasta 'files'")
            return None
        
        selected_file = files[0]
        df = pd.read_csv(os.path.join('files', selected_file))
        
        # Converter colunas num√©ricas
        numeric_columns = ['Age', 'PPG', 'APG', 'FG%', '3P%', 'EFF', 'MPG', 'RPG', 'SPG', 'BPG']
        for col in numeric_columns:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None

def show_column_info(df):
    """Mostra informa√ß√µes sobre as colunas dispon√≠veis"""
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("### Estat√≠sticas Dispon√≠veis")
        stats_cols = [col for col in df.columns if any(x in col for x in ['PPG', 'APG', 'RPG', 'FG%', '3P%', 'EFF'])]
        for col in stats_cols:
            st.write(f"- {col}")
    
    with col2:
        st.write("### Informa√ß√µes de Jogador")
        info_cols = [col for col in df.columns if col not in stats_cols]
        for col in info_cols[:10]:  # Limitando para n√£o ficar muito grande
            st.write(f"- {col}")

def process_stats_query(df, age=None, stat_column=None):
    """Processa consulta de estat√≠sticas"""
    try:
        # Filtrar por idade se especificado
        if age is not None:
            df = df[df['Age'] == age].copy()
        else:
            df = df.copy()

        # Se uma estat√≠stica espec√≠fica foi solicitada
        if stat_column and stat_column in df.columns:
            columns = ['Player Name', 'Team Name', 'League', 'Age', stat_column]
            result = df.nlargest(10, stat_column)[columns].round(1)
        else:
            # Calcular m√©trica ofensiva
            df['Metrica_Ofensiva'] = (
                df['PPG'] * 0.4 + 
                df['APG'] * 0.3 + 
                df['FG%'] * 0.15 + 
                df['3P%'] * 0.15
            )
            columns = ['Player Name', 'Team Name', 'League', 'Age', 
                      'PPG', 'APG', 'FG%', '3P%', 'Metrica_Ofensiva']
            result = df.nlargest(10, 'Metrica_Ofensiva')[columns].round(1)
        
        return result
    except Exception as e:
        st.error(f"Erro ao processar estat√≠sticas: {str(e)}")
        return None

def create_agent(df):
    """Cria o agente do LangChain"""
    try:
        llm = ChatOpenAI(
            temperature=temperature,
            api_key=st.secrets["OPENAI_API_KEY"],
            model_name="gpt-3.5-turbo"
        )

        return create_pandas_dataframe_agent(
            llm,
            df,
            verbose=True,
            handle_parsing_errors=True,
            max_iterations=2
        )
    except Exception as e:
        st.error(f"Erro ao criar agente: {str(e)}")
        return None

# Carregamento dos dados
df = load_data()

if df is not None:
    # Criar agente
    agent = create_agent(df)
    
    # Mostrar ajuda inicial
    if "show_help" not in st.session_state:
        st.session_state.show_help = True
        
    if st.session_state.show_help:
        with st.expander("‚ÑπÔ∏è Como usar o BasketIA", expanded=True):
            st.write("Bem-vindo ao BasketIA! Aqui voc√™ pode:")
            st.write("1. Fazer perguntas sobre estat√≠sticas dos jogadores")
            st.write("2. Filtrar por idade ou m√©tricas espec√≠ficas")
            st.write("3. Ver rankings e compara√ß√µes")
            show_column_info(df)
            if st.button("Entendi! N√£o mostrar novamente"):
                st.session_state.show_help = False
                st.experimental_rerun()
    
    # Interface do chat
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "Ol√°! Como posso ajudar com a an√°lise dos dados? Voc√™ pode perguntar sobre estat√≠sticas dos jogadores por idade, rankings e mais. Use a barra lateral para ver as estat√≠sticas dispon√≠veis e exemplos de perguntas!"}
        ]

    # Mostrar hist√≥rico de mensagens
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Input do usu√°rio com sugest√µes
    # Criar lista de sugest√µes baseada nas colunas
    suggestions = [
        "Quais s√£o os jogadores com mais pontos por jogo (PPG)?",
        "Mostre os l√≠deres em assist√™ncias (APG)",
        "Quem tem o melhor aproveitamento nos arremessos de 3 pontos (3P%)?",
        "Liste os jogadores com maior efici√™ncia (EFF)",
        "Quais jogadores t√™m mais roubos de bola (SPG)?",
        "Mostre os melhores em bloqueios (BPG)",
        "Quem tem o melhor aproveitamento em lances livres (FT%)?",
        "Mostre os jogadores que mais jogam minutos por jogo (MPG)",
        "Quais s√£o os l√≠deres em rebotes (RPG)?",
        "Liste os jogadores com mais rebotes ofensivos (ORB)",
        "Mostre os top 10 jogadores de uma idade espec√≠fica",
        "Quem s√£o os melhores jogadores por posi√ß√£o (Pos)?",
        "Liste os jogadores por nacionalidade"
    ]

    # Input do usu√°rio
    if prompt := st.chat_input(
        "Fa√ßa uma pergunta sobre os dados...",
        help="Digite sua pergunta ou use as sugest√µes da barra lateral"
    ):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Processar resposta
        with st.chat_message("assistant"):
            try:
                # Verificar se √© uma consulta de estat√≠stica espec√≠fica
                stat_keywords = {
                    'PPG': ['ppg', 'pontos por jogo', 'pontos'],
                    'APG': ['apg', 'assist√™ncias', 'assistencias'],
                    'RPG': ['rpg', 'rebotes'],
                    'FG%': ['fg%', 'field goal', 'arremessos de 2'],
                    '3P%': ['3p%', 'three point', 'arremessos de 3'],
                    'EFF': ['eff', 'efici√™ncia', 'eficiencia']
                }
                
                stat_column = None
                for col, keywords in stat_keywords.items():
                    if any(keyword in prompt.lower() for keyword in keywords):
                        stat_column = col
                        break

                # Verificar se √© uma consulta de idade
                idade = None
                if "anos" in prompt.lower():
                    idade = int(''.join(filter(str.isdigit, prompt)))

                # Processar a consulta
                result = process_stats_query(df, age=idade, stat_column=stat_column)
                if result is not None and not result.empty:
                    if idade:
                        st.write(f"Aqui est√£o os top 10 jogadores com {idade} anos:")
                    else:
                        st.write("Aqui est√£o os resultados:")
                    st.table(result)
                else:
                    if idade:
                        st.write(f"N√£o encontrei jogadores com {idade} anos.")
                    else:
                        response = agent.run(prompt)
                        st.markdown(response)

            except Exception as e:
                st.error("Ocorreu um erro ao processar sua pergunta.")
                st.write("Tente usar uma das sugest√µes da barra lateral ou reformular sua pergunta.")
                show_column_info(df)
else:
    st.error("Por favor, coloque arquivos CSV na pasta 'files'.")

# Estilo personalizado
st.markdown("""
<style>
    .stTable {
        width: 100%;
        margin: 1rem 0;
    }
    .stTable th {
        background-color: #f0f2f6;
        font-weight: bold;
        text-align: center;
        padding: 0.5rem;
    }
    .stTable td {
        text-align: right;
        padding: 0.5rem;
    }
    .stTable td:first-child {
        text-align: left;
    }
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    
    /* Estilo para as sugest√µes */
    .suggestion-box {
        padding: 0.5rem;
        margin: 0.5rem 0;
        border-radius: 0.3rem;
        background-color: #f0f2f6;
        cursor: pointer;
    }
    .suggestion-box:hover {
        background-color: #e0e2e6;
    }
</style>
""", unsafe_allow_html=True)
